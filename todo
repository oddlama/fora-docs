# host.something does variable lookup in the following order:
# ost, groups (respecting group dependencies), this script (global variable above)
if host.install_nginx:
	system.package(name="Install nginx", package="nginx")

    global variables are mostly an anti-pattern. use script defaults insteadi.
	global variables lend themsleves nicely to represent things like api keys that
	are not defaults but the same for all hosts.

## Explanations. Will be moved.

production inventory should be able to set other global variables
but keep the rest the same. One way: inventory can run code on hosts,
e.g. add them to a group. Other way: host/group can inspect variables on inventory.
Bad, cause we want variables as separate groups for e.g. staging and production.

fora is designed to work with arbitrary filenames. arguments are properly passed and never split like in a shell. robustutututu

**Inventory.** A inventory is a collection of hosts against which the scripts should be run. The simplest inventory is just a hostname like `root@example.com` passed to the `fora` command, but usually will be a file that defines an array of hosts. Let's call it `inventory.py`.

**Host.** A host definition is. list of vars, has a url which is by default the name. It is not necessary to have a matching module, if the host has no special. and.

**Group.** Similar to a host, a group is a python module file defining variables, which a host inherits (at lookup time!) if it is in the group. Groups can depend on one another to establish a definite variable precedence. Implicit all group for global variables.

**Script.** A script is basically just a regular python script that will be instanciated each time it is run on a specific host, with access to the initialized fora library. A script calls the operations that should be excuted on the currently processed host.

Global variables in a script are also inherited by a host (with least precedence), which allows the script to define global variables that have fallback values in case a host doesn't override it.

A script can define parameters, which allows you to separate and reuse functionality. Scripts can be called from other scripts with a special operation.
